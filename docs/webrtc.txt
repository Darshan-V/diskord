1) Set up signaling: Both peers need to connect to a signaling server (e.g. using Socket.io) to exchange session description information and ICE candidates. The signaling server is only used to exchange metadata, and doesn't handle the actual media stream.

2) Create peer connection: Each peer needs to create a new instance of RTCPeerConnection to manage the connection.

3) Add media stream: Each peer needs to get access to the user's media streams (e.g. using getUserMedia) and add them to the peer connection.

4) Create data channel: Each peer can create a data channel to exchange any arbitrary data (e.g. chat messages).

5) Exchange session description: Once the signaling is established, both peers can create and exchange session description information (i.e. offer and answer). The session description includes information about the media stream, codec, and other connection settings.

6) Exchange ICE candidates: Each peer will generate ICE candidates, which represent network address information about the peer's connection, and send them to the other peer over the signaling server.

7) Set remote description: Once a peer receives a session description from the other peer, it needs to set it as the remote description of the RTCPeerConnection.

8) Add ICE candidates: Each peer needs to add the ICE candidates received from the other peer to their own RTCPeerConnection.

9) Establish the connection: Once both peers have exchanged session description and ICE candidates, the RTCPeerConnection will use the information to establish a peer-to-peer connection.

10) Start communication: Once the connection is established, each peer can start sending media streams and data over the connection.

